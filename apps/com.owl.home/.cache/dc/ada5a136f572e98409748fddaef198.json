{"id":"../node_modules/widgetsjs/dist/shim.js","dependencies":[{"name":"/root/Desktop/owl-bundle/apps/com.owl.home/node_modules/widgetsjs/dist/shim.js.map","includedInParent":true,"mtime":499162500000},{"name":"/root/Desktop/owl-bundle/apps/com.owl.home/node_modules/widgetsjs/src/shim.ts","includedInParent":true,"mtime":499162500000},{"name":"/root/Desktop/owl-bundle/apps/com.owl.home/package.json","includedInParent":true,"mtime":1579301353931},{"name":"/root/Desktop/owl-bundle/apps/com.owl.home/node_modules/widgetsjs/package.json","includedInParent":true,"mtime":1579300032383}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * This shim allows elements written in, or compiled to, ES5 to work on native\r\n * implementations of Custom Elements v1. It sets new.target to the value of\r\n * this.constructor so that the native HTMLElement constructor can access the\r\n * current under-construction element's definition.\r\n */\r\nfunction shim() {\r\n    var _window = window;\r\n    if (\r\n    // No Reflect, no classes, no need for shim because native custom elements\r\n    // require ES2015 classes or Reflect.\r\n    _window.Reflect === undefined ||\r\n        _window.customElements === undefined ||\r\n        // The webcomponentsjs custom elements polyfill doesn't require\r\n        // ES2015-compatible construction (`super()` or `Reflect.construct`).\r\n        _window.customElements.polyfillWrapFlushCallback) {\r\n        return;\r\n    }\r\n    var BuiltInHTMLElement = HTMLElement;\r\n    _window.HTMLElement = /** @this {!Object} */ function HTMLElement() {\r\n        return Reflect.construct(BuiltInHTMLElement, [], /** @type {!Function} */ (this.constructor));\r\n    };\r\n    HTMLElement.prototype = BuiltInHTMLElement.prototype;\r\n    HTMLElement.prototype.constructor = HTMLElement;\r\n    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);\r\n}\r\nexports.shim = shim;\r\n"},"sourceMaps":{"js":{"version":3,"file":"shim.js","sourceRoot":"","sources":["../src/shim.ts"],"names":[],"mappings":";AAAA;;;;;;;;GAQG;;AAEH;;;;;GAKG;AACH,SAAgB,IAAI;IAChB,IAAM,OAAO,GAAQ,MAAM,CAAC;IAC5B;IACE,0EAA0E;IAC1E,qCAAqC;IACrC,OAAO,CAAC,OAAO,KAAK,SAAS;QAC7B,OAAO,CAAC,cAAc,KAAK,SAAS;QACpC,+DAA+D;QAC/D,qEAAqE;QACrE,OAAO,CAAC,cAAc,CAAC,yBAAyB,EAChD;QACA,OAAO;KACR;IACD,IAAM,kBAAkB,GAAG,WAAW,CAAC;IACvC,OAAO,CAAC,WAAW,GAAG,sBAAsB,CAAC,SAAS,WAAW;QAC/D,OAAO,OAAO,CAAC,SAAS,CACpB,kBAAkB,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC;IACF,WAAW,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;IACrD,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG,WAAW,CAAC;IAChD,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACzD,CAAC;AArBH,oBAqBG","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n/**\r\n * This shim allows elements written in, or compiled to, ES5 to work on native\r\n * implementations of Custom Elements v1. It sets new.target to the value of\r\n * this.constructor so that the native HTMLElement constructor can access the\r\n * current under-construction element's definition.\r\n */\r\nexport function shim () {\r\n    const _window = <any>window;\r\n    if (\r\n      // No Reflect, no classes, no need for shim because native custom elements\r\n      // require ES2015 classes or Reflect.\r\n      _window.Reflect === undefined ||\r\n      _window.customElements === undefined ||\r\n      // The webcomponentsjs custom elements polyfill doesn't require\r\n      // ES2015-compatible construction (`super()` or `Reflect.construct`).\r\n      _window.customElements.polyfillWrapFlushCallback\r\n    ) {\r\n      return;\r\n    }\r\n    const BuiltInHTMLElement = HTMLElement;\r\n    _window.HTMLElement = /** @this {!Object} */ function HTMLElement() {\r\n      return Reflect.construct(\r\n          BuiltInHTMLElement, [], /** @type {!Function} */ (this.constructor));\r\n    };\r\n    HTMLElement.prototype = BuiltInHTMLElement.prototype;\r\n    HTMLElement.prototype.constructor = HTMLElement;\r\n    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);\r\n  }"]}},"error":null,"hash":"de6893d05a6eb902cb86134f0e5fc720","cacheData":{"env":{}}}