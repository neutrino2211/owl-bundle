{"id":"AL4b","dependencies":[{"name":"/home/tbranyen/git/diffhtml/packages/diffhtml/package.json","includedInParent":true,"mtime":1534977442154},{"name":"/home/tbranyen/git/diffhtml/packages/diffhtml/.babelrc","includedInParent":true,"mtime":1534634600429}],"generated":{"js":"\"use strict\";function e(e){var r=e.promises,o=void 0===r?[]:r;return o.length?e.promise=Promise.all(o).then(function(){return e.end()}):e.promise=Promise.resolve(e.end())}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=e;","map":{"mappings":[{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":0}},{"source":"tasks/end-as-promise.js","original":{"line":4,"column":15},"generated":{"line":1,"column":13}},{"source":"tasks/end-as-promise.js","name":"endAsPromise","original":{"line":4,"column":24},"generated":{"line":1,"column":22}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":4,"column":37},"generated":{"line":1,"column":24}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":5,"column":28},"generated":{"line":1,"column":27}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":5,"column":28},"generated":{"line":1,"column":31}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":5,"column":28},"generated":{"line":1,"column":33}},{"source":"tasks/end-as-promise.js","name":"promises","original":{"line":5,"column":10},"generated":{"line":1,"column":35}},{"source":"tasks/end-as-promise.js","name":"promises","original":{"line":5,"column":10},"generated":{"line":1,"column":44}},{"source":"tasks/end-as-promise.js","original":{"line":5,"column":21},"generated":{"line":1,"column":51}},{"source":"tasks/end-as-promise.js","original":{"line":5,"column":21},"generated":{"line":1,"column":55}},{"source":"tasks/end-as-promise.js","original":{"line":5,"column":21},"generated":{"line":1,"column":57}},{"source":"tasks/end-as-promise.js","original":{"line":4,"column":50},"generated":{"line":1,"column":60}},{"source":"tasks/end-as-promise.js","name":"promises","original":{"line":10,"column":6},"generated":{"line":1,"column":62}},{"source":"tasks/end-as-promise.js","name":"promises","original":{"line":10,"column":6},"generated":{"line":1,"column":69}},{"source":"tasks/end-as-promise.js","name":"length","original":{"line":10,"column":15},"generated":{"line":1,"column":71}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":11,"column":11},"generated":{"line":1,"column":78}},{"source":"tasks/end-as-promise.js","name":"promise","original":{"line":11,"column":23},"generated":{"line":1,"column":80}},{"source":"tasks/end-as-promise.js","name":"Promise","original":{"line":11,"column":33},"generated":{"line":1,"column":88}},{"source":"tasks/end-as-promise.js","name":"all","original":{"line":11,"column":41},"generated":{"line":1,"column":96}},{"source":"tasks/end-as-promise.js","name":"promises","original":{"line":11,"column":45},"generated":{"line":1,"column":100}},{"source":"tasks/end-as-promise.js","name":"then","original":{"line":11,"column":55},"generated":{"line":1,"column":103}},{"source":"tasks/end-as-promise.js","original":{"line":11,"column":60},"generated":{"line":1,"column":108}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":11,"column":66},"generated":{"line":1,"column":119}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":11,"column":66},"generated":{"line":1,"column":126}},{"source":"tasks/end-as-promise.js","name":"end","original":{"line":11,"column":78},"generated":{"line":1,"column":128}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":16,"column":9},"generated":{"line":1,"column":136}},{"source":"tasks/end-as-promise.js","name":"promise","original":{"line":16,"column":21},"generated":{"line":1,"column":138}},{"source":"tasks/end-as-promise.js","name":"Promise","original":{"line":16,"column":31},"generated":{"line":1,"column":146}},{"source":"tasks/end-as-promise.js","name":"resolve","original":{"line":16,"column":39},"generated":{"line":1,"column":154}},{"source":"tasks/end-as-promise.js","name":"transaction","original":{"line":16,"column":47},"generated":{"line":1,"column":162}},{"source":"tasks/end-as-promise.js","name":"end","original":{"line":16,"column":59},"generated":{"line":1,"column":164}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":171}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":178}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":193}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":201}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":214}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":215}},{"source":"tasks/end-as-promise.js","original":{"line":17,"column":1},"generated":{"line":1,"column":222}},{"source":"tasks/end-as-promise.js","name":"endAsPromise","original":{"line":4,"column":24},"generated":{"line":1,"column":226}},{"source":"tasks/end-as-promise.js","name":"endAsPromise","original":{"line":4,"column":24},"generated":{"line":1,"column":234}},{"source":"tasks/end-as-promise.js","name":"endAsPromise","original":{"line":4,"column":24},"generated":{"line":1,"column":242}}],"sources":{"tasks/end-as-promise.js":"// End flow, this terminates the transaction and returns a Promise that\n// resolves when completed. If you want to make diffHTML return streams or\n// callbacks replace this function.\nexport default function endAsPromise(transaction) {\n  const { promises = [] } = transaction;\n\n  // Operate synchronously unless opted into a Promise-chain. Doesn't matter\n  // if they are actually Promises or not, since they will all resolve\n  // eventually with `Promise.all`.\n  if (promises.length) {\n    return transaction.promise = Promise.all(promises).then(() => transaction.end());\n  }\n\n  // Pass off the remaining middleware to allow users to dive into the\n  // transaction completed lifecycle event.\n  return transaction.promise = Promise.resolve(transaction.end());\n}\n"},"lineCount":null}},"hash":"9e314135527085288067863bc1abcac6","cacheData":{"env":{}}}